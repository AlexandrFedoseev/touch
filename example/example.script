local sysinfo = nil
local touch_data = nil
local touch = require("touch.touch")
local camera = require("orthographic.camera")
local touch_orbs = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	sysinfo = sys.get_sys_info()
	if sysinfo.system_name ~= "HTML5" then return true end

	label.set_text("/labels#does_support_multitouch", "Does support multitouch? " .. tostring(html5.run("does_support_multitouch()")))
	label.set_text("/labels#touch_count", "Touch count: " .. tostring(html5.run("number_of_touches()")))
	touch_orbs = {}
	touch_orbs[1] = go.get_id("/touch_1")
	touch_orbs[2] = go.get_id("/touch_2")
	touch_orbs[3] = go.get_id("/touch_3")
	touch_orbs[4] = go.get_id("/touch_4")

end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	label.set_text("/labels#touch_count", "Touch count: " .. tostring(html5.run("number_of_touches()")))
	html5.run("get_touch_data()")
	----[[
	local touch_data = json.decode(html5.run("get_touch_data()"))
	if next(touch_data) ~= nil then
		for i=1, #touch_data do
			if i > 4 then break end
			local position = vmath.vector3(touch_data[i].x, touch_data[i].y, 0)
			go.set_position(position, touch_orbs[i])
		end

	end

	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	--pprint(action)
	if action_id == hash("touch") then
		
		--local position = camera.screen_to_world(hash("/camera"), vmath.vector3(action.x, action.y, 0))
		--go.set_position(position, go.get_id("/touch_1"))		
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
